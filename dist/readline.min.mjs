async function*e(e,t="utf-8",n=()=>!1){const[i,r,a]=await(async e=>{if(e instanceof Response)return[e.body,parseInt(e.headers.get("content-length")),"response"];if(e instanceof ReadableStream)return[e,length,"stream"];if(e instanceof Blob)return[await e.stream(),e.size,"blob"];throw new Error("unsupport type of input. ["+typeof e+"]")})(e),l=async()=>{if(!0===n()){try{await s.cancel()}catch(e){console.error("cancel read failed...",e)}return!0}return!1},o=new TextDecoder(t),s=await i.getReader();let c,f=0,d=0;for(;;){if(await l())return;let{done:e,value:t}=await s.read();if(e)break;let n=0;for(;;){if(await l())return;let e=t.indexOf(10,n);if(-1===e){let e=t.slice(n),i=void 0===c?new Uint8Array:c;c=new Uint8Array(i.length+e.length),c.set(i,0),c.set(e,i.length);break}let i=t.slice(n,e+1);if(void 0!==c){let e=new Uint8Array(c.length+i.length);e.set(c,0),e.set(i,c.length),i=e,c=void 0}f+=i.length,10===i.at(-1)&&(i=i.slice(0,-1),13===i.at(-1)&&(i=i.slice(0,-1)));let s=o.decode(i);d++,yield[f,r,d,s,a],n=e+1}}if(void 0!==c){if(await l())return;let e=c;f+=e.length,10===e.at(-1)&&(e=e.slice(0,-1),13===e.at(-1)&&(e=e.slice(0,-1)));let t=o.decode(e);d++,yield[f,r,d,t,a]}}async function*t(e,t="utf-8",n=()=>!1){const i=e.size,r=[];let a=0;for(;a<i;){const t=e.slice(a,a+65536);r.push(t),a+=t.size}let l,o=0,s=0;const c=new TextDecoder(t);for(;0!==r.length;){if(await n())return;const e=r.shift(),t=new Uint8Array(await e.arrayBuffer());let a=0;for(;;){if(await n())return;let e=t.indexOf(10,a);if(-1===e){let e=t.slice(a),n=void 0===l?new Uint8Array:l;l=new Uint8Array(n.length+e.length),l.set(n,0),l.set(e,n.length);break}let r=t.slice(a,e+1);if(void 0!==l){let e=new Uint8Array(l.length+r.length);e.set(l,0),e.set(r,l.length),r=e,l=void 0}o+=r.length,10===r.at(-1)&&(r=r.slice(0,-1),13===r.at(-1)&&(r=r.slice(0,-1)));let f=c.decode(r);s++,yield[o,i,s,f],a=e+1}}if(void 0!==l){if(await n())return;let e=l;o+=e.length,10===e.at(-1)&&(e=e.slice(0,-1),13===e.at(-1)&&(e=e.slice(0,-1)));let t=c.decode(e);s++,yield[o,i,s,t]}}async function*n(e,t="utf-8",n=()=>!1){const i=e.size,r=[];let a=0;for(;a<i;){const t=e.slice(a,a+65536);r.push(t),a+=t.size}let l,o=0,s=0;const c=new TextDecoder(t);for(;0!==r.length;){if(await n())return;const e=r.pop(),t=new Uint8Array(await e.arrayBuffer());let a=-1;for(;;){if(await n())return;let e=t.lastIndexOf(10,a);if(-1===e){let e=t.slice(0,t.length+a+2),n=void 0===l?new Uint8Array:l;l=new Uint8Array(n.length+e.length),l.set(e,0),l.set(n,e.length);break}let r=t.slice(e+1,t.length+a+2);if(void 0!==l){let e=new Uint8Array(l.length+r.length);e.set(r,0),e.set(l,r.length),r=e,l=void 0}o+=r.length,10===r.at(-1)&&(r=r.slice(0,-1),13===r.at(-1)&&(r=r.slice(0,-1)));let f=c.decode(r);s--,yield[o,i,s,f],a=e-t.length-1}}if(void 0!==l){if(await n())return;let e=l;o+=e.length,10===e.at(-1)&&(e=e.slice(0,-1),13===e.at(-1)&&(e=e.slice(0,-1)));let t=c.decode(e);s--,yield[o,i,s,t]}}async function i(t,n="utf-8",i=void 0){return[i=i instanceof AbortController?i:new AbortController,await e(t,n,(()=>i.signal.aborted))]}async function r(e,n="utf-8",i=void 0){return[i=i instanceof AbortController?i:new AbortController,await t(e,n,(()=>i.signal.aborted))]}async function a(e,t="utf-8",i=void 0){return[i=i instanceof AbortController?i:new AbortController,await n(e,t,(()=>i.signal.aborted))]}async function l(e,t,n=30,i="utf-8"){n=Math.max("number"!=typeof n?10:n,10);const r=[];let a=0;const[l,o]=await e(t,i);return[l,(e=Number.NEGATIVE_INFINITY,t=Number.POSITIVE_INFINITY)=>{if(t<e)throw new Error("Invalid Range Of lines_around. "+JSON.stringify([e,t]));const n=Math.max(a+e,0),i=Math.min(a+t+1,r.length);return r.slice(n,i)},await async function*(e,t){for(;r.length!==n+1;){const{done:t,value:n}=await e.next();if(t)break;r.push(n)}for(;a<r.length;){const i=r[a];if(!0===t.aborted)return;yield i;const{done:l,value:o}=await e.next();l||r.push(o),a<n?a++:r.shift()}}(o,l.signal)]}const o=l.bind(null,i),s=l.bind(null,r),c=l.bind(null,a);export{i as readline,o as readline_around,c as readline_around_backwards,s as readline_around_forwards,a as readline_backwards,r as readline_forwards};
